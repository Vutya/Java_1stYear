import java.util.*;

public class CollectionsExample {

    //psvm[Tab]
    public static void main(String[] args) {
        /*Создадим список, ArrayList
        список будет хранить строки, поэтому
        тип надо записать так: ArrayList<String>.
        В коллекциях при указании типа в угловых скобках
        мы пишем тип элементов.+
        Замечание. В очень старых версиях джавы угловых
        скобок не было. Но мы их пишем.
         */

        ArrayList<String> l1 = new ArrayList<String>();
        ArrayList<String> l2 = new ArrayList<>();
        // Алмазик <> означает, что и так понятно, какой тип, но писать его нужно.

        List<String> l3 = new ArrayList<>();
        //l3 - это переменная для хранения списков. В неё можно записать ArrayList.
        //
        //Animal a = new Cat(); ???Cat c = new Animal();
        //Третй способ рекомендуется для создания списков.

        Collection<String> l4 = new ArrayList<>();

        //В 10-Java
        //var l5 = new ArrayList<String>();

        l3.add("helo");
        l3.add("cat");
        l3.add("wow");
        //Можно спокойно печатать
        System.out.println(l3);
        for (String s : l3) // iter[Tab]
            System.out.println(s); //sout[Tab]

        System.out.println(l3.get(2)); // abc 0,1,1
        l4.add("xyz");
        //System.out.println(l4.get(0)); //??? l4 - это Collection, такой операции там нет

        //Вспомогательные классы Collection и Arrays
        //(!) s на конце

        List<String> l5 = Arrays.asList("aa","kek","lol");
        //создаётся список из указанного набора элементов
        //asList возвращает неизменяемый список
        //l5.add("dd"); //возникнет ошибка при запуске
        String[] s = {"xx", "yy", "zz"};
        List<String> l6 = Arrays.asList(s);
        //т.е. либо массив, либо перечислить элементы

        List<String> l7 = Collections.nCopies(10,"asdf");
        //это список из 10 одинаковых значений.
        //тоже неизменяемый.
        //Collections.[Ctrl + Space] и ищите кучу полезных функций.
    }

    /*Коллекции хранят набор элементов. Позволяют делать больше, чем могут массивы.
    В срвнении с ними коллекции поддерживают намного больше операция.
    Недостаток - требует больше памяти. Базовые операции могут выполняться дольше.

    Есть много видов коллекций. Основные виды: списки(list) и множества(set). Различаются
    наюбором допустимых операций.
    List - имеется порядок на элементах, т.е. всегда можно обратиться к элементу по его номеру.
    Например, можно обратиться к первому элементу списка.
    Set - хранит элементы без повторений(как множество).

    Универсальные операции:
    Пусть c, c1 - коллекции.
    c.add(x) - добавить элемент в коллекцию. У списков элемент всегда добавляется в конец.
               Возвращает boolean, добавился ли элемент.

    c.addAll(c1) - добавить в коллекцию c все элементы коллекции c1/.
    c.clear() - очиситить коллекцию.
    c.contains(x) - boolean, содержит ли коллекцияя элемент x
                    Во множествах эта операция обычно работает
                    очень быстро.
    c.containsAll(c1) - boolean                                        !Ctrl + Q!
    c.isEmpty()
    c.remove(x)
    c.removeAll()                           Ctrl+Space автодополнение
    c.size()

    Элементы перебираются циклом for.
    for (тип_элемента x in c)
        действие с элементом x

    В списках действий больше.

    l - список, тогда:
    l.add(index, x)
    l.remove(index)
    l.get(index)
    l.subList(from, to)

    Виды списков:
    ArrayList, LinkedList.
    ArrayList хранит данные внутри массива.
    LinkedList хранит данные в виде двусвязного списка.
    Отличаются памятью (ArrayList требует меньше памяти)
    и скоростью выполнения операций(например, remove в ArrayList
    работает медленнее).
    В 99% ArrayList подходит лучше, чем LinkedList.

    Виды множеств:
    HashSet, TreeSet, LinkedHashSet.

    Отличаются используемыми структурами данных, т.е. тем, как
    элементы множеств хранятся внутри.
    На практике отличие в порядке перебора элементов.

    for(тип x in set)

    В HashSet элементы перебираются в неопределённом порядке.
    Это множество работает быстрее всех других, поэтому, если
    вам не важен порядок перебора элементов, то пользуйтесь
    HashSet.

    TreeSet - перебирает элементы по возрастанию.
    set.add(2);
    set.add(3);
    set.add(1);

    При переборе получим 1, 2, 3.

    Строки перебираются в алафитном порядке.

    LinkedHashSet - перебирает элементы в порядке добавления.

    Итого. Если нужен список, выбираем ArrayList.
           Если нужно множество, выбирайте HashSet, или
           другое, если важен порядок перебора.

    Создание коллекций. см. код

     */

}
