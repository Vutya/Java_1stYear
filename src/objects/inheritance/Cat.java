package objects.inheritance;
/*
Ключевое слово extends означает, что:
1) класс Cat расширяет класс Animal
2) Cat - наследник класса Animal
3) Cat - частный случай Animal

Если сделать extends, то все поля и методы базового класса(от которого наследуем)
переходят в класс потомока.
 */

public class Cat extends Animal{
    // поле name, метод getName, метод getSound...
    // (интересный эффект, поле name есть в классе Cat,
    // но с ним ничего нельзя сделать, потому что оно приватное).
    // если всё-таки хочется узнать name, то можно использовать getName.
    // С прошлого раза вспомните модификатор доступа protected.
    // поле или метод доступны только в потомке.

    public Cat() {
        super("Murzik"); // вызов конструктора базового класса
        // вызов делает ключеове слово super, оно должно быть
        // первым в конструкторе.
        System.out.println("Meoow");
    }

    public Cat(String name) {
        super(name); // вызвать конструктор базового класса
    }

    // Можно добавлять новые методы и поля.

    private int miceCount = 0; // сколько поймано мышей
    public void catchAMouse() {
        miceCount++;
        System.out.println(getSound() + ", " + miceCount);
    }

    // можно переопределить методы, повторив заголовок  метода.
    // Это переопределение, а не новый метод
    // overriding
    @Override
    public String getSound() {
        return "MEOOOOOWW";
    }
    // аннотация Override перед методом необязательна, но
    // рекомендуется. Тогда компилятор проверит, что это
    // действительно переопределение.
}
