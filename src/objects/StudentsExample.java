package objects;

public class StudentsExample {
    public static void main(String[] args) {

        // Заведем переменные s1 и s2 для хранения студентов.
        // В каждой переменной хранится строка и число.
        // Создание объекта. Оператор new.
        Student s1 = new Student();
        Student s2 = new Student();

        // как получить доступ к name и course внутри s1 и s2
        s1.name = "Иванов";
        s2.name = "Петров";
        s1.course = 1;
        s2.course = 2;

        System.out.println(s1.name + " учится на курсе " + s1.course);

        // Различие классов и объектов.
        // Класс описывает шаблон устройства объекта.
        // Класс говорит, что в объектах есть такие-то данные(поля) и
        // такое-то поведение(методы).
        // Класс Student всегда один, потому что есть
        // только одно описание того, как устроены студенты.
        // Объекты - это реализация класса. Объектов может
        // быть любое количество, от 0 до много.
        // В нашей программе 2 объекта.
        // Объекты - конкретные студенты, класс - понятие студента.

        // Как вызывать метод.
        s1.greet();  // объект точка метод(), в методах
        s2.greet();  // всегда круглые скобки. s1.greet() - то
                     // greet это ссылка на поле, а такого поля нет.

        // Конструкторы. Было бы здорово создать студента,
        // сразу указав и имя, и курс.
        Student2 ss2 = new Student2("Петрова", 3);
        ss2.greet();

        // значения полей по умолчанию
        System.out.println(new Student().course); // 0
        System.out.println(new Student().name);  // null

        System.out.println(new Student2().course); // 1
        System.out.println(new Student2().name);  // null

        // Использование класса с приватными полями
        Student3 sss = new Student3("Васильева",4);
        // sss.name = "..."; // не работает:( name - приватный
        // System.out.println(sss.name); // тоже нет!

        // чтобы узнать (изменить) имя, нужен метод
        // методы для того, чтобы узнать или изменить
        // значение свойств называются get- и set- методами.
        System.out.println(sss.getName());
        sss.setName("Жопа");

        //----------- 4. Static ------------------------------
        Student4 i4 = new Student4("Иванов", 1);
        Student4 p4 = new Student4("Петров", 2);

        // объектов класса Student4: 2шт.
        // классов Student4: 1шт.
        // полей внутри класса: 2 шт. (name, course)

        /*
        static поле класса, в отличие от обычного поля,
        содержится в классе, а не в объекте. Т.е. оно существует
        в единственном экземпляре.

        static метод относится к классу, а не к объекту.
        Вызов:
         */
        System.out.println(Student4.getStudentsCount());
        // System.out.println();
        // System - класс, out - статическое поле, println() - обычный метод

        // p4.getStudentsCount(); // метод статический, но вызывается
        // у объекта, а не у класса. Это работает, но так писать не
        // рекомендуется, это нелогично.
        // Деструкторов в Java нет!!!

        // Math.PI - статическое поле  в классе Math

        // Ключевое слово final
        /*
        Слово final можно дописывать при определении локальной переменной, поля, класса, метода.
        Для переменной или поля final означает, что значение(переменной или поля) нельзя
        изменять после присваивания.

        Это примерно как const в других языках, но лучше.
         */
        final int n = 10;
        System.out.println(n); // можно читать
        // n=42; // нельзя изменять

        // Присваивание можно делать не сразу, но обязательно перед первым чтением.
        final int m;

        if (n > 5)
            m = 10;
        else
            m = 20;

        System.out.println(m);
    }
}
